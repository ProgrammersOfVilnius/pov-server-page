#!/usr/bin/python
"""
Build a generic server page.  Useful for sysadmins.

Reads a configuration file (/etc/pov/server-page.conf by default) and creates
an Apache vhost in /etc/apache2/sites-enabled/{hostname}, as well as a
static website in /var/www/{hostname}.

For full setup you also need to create the directory for Apache logs, enable
mod_rewrite, mod_ssl, make sure your Apache is listening on port 443, set up an
SSL certificate, set up a password file with htpasswd, enable the site with
a2ensite and restart Apache::

    htpasswd -c /etc/pov/fridge.passwd username
    a2enmod rewrite
    a2enmod ssl
    # skipping SSL cert setup: too long
    a2ensite $(hostname -f)
    apache2ctl configtest && apache2ctl graceful

"""

import ConfigParser
import errno
import optparse
import os
import sys

from mako.lookup import TemplateLookup


debian_package = (__file__ == '/usr/sbin/pov-update-server-page')


if debian_package:
    DEFAULT_CONFIG_FILE = '/etc/pov/server-page.conf'
    TEMPLATE_DIR = '/usr/share/pov-server-page/'
    COLLECTION_CGI = '/usr/lib/pov-server-page/collection.cgi'
    DEFAULT_AUTH_USER_FILE = '/etc/pov/fridge.htpasswd'
else:
    DEFAULT_CONFIG_FILE = 'server-page.conf'
    TEMPLATE_DIR = os.path.abspath(os.path.dirname(__file__))
    COLLECTION_CGI = os.path.join(TEMPLATE_DIR, 'collection.cgi')
    DEFAULT_AUTH_USER_FILE = '/etc/pov/fridge.htpasswd'


def get_fqdn():
    # socket.getfqdn() likes to get confused on Ubuntu and return
    # 'localhost6.localdomain' etc.
    return os.popen("hostname -f").read().strip()


class Error(Exception):
    pass


class Builder(object):

    DIRECTORY = '<empty-directory>'

    HTML_MARKER = '<!-- generated by pov-update-server-page -->'
    CONFIG_MARKER = '# generated by pov-update-server-page'

    defaults = dict(
        HOSTNAME=get_fqdn(),
        COLLECTION_CGI=COLLECTION_CGI,
        AUTH_USER_FILE=DEFAULT_AUTH_USER_FILE,
        PORTS='*:80 *:443',
        INCLUDE='',
    )
    build_list = [
        # (destination, template, marker)
        ('/var/www/{HOSTNAME}/index.html', 'index.html.in', HTML_MARKER),
        ('/var/log/apache2/{HOSTNAME}', DIRECTORY, None),
        ('/etc/apache2/sites-available/{HOSTNAME}', 'apache.conf.in',
         CONFIG_MARKER),
    ]
    check_list = [
        ('/etc/apache2/mods-enabled/ssl.load', 'a2enmod ssl'),
        ('/etc/apache2/mods-enabled/rewrite.load', 'a2enmod rewrite'),
        ('/etc/apache2/sites-enabled/{HOSTNAME}', 'a2ensite {HOSTNAME}'),
        ('{AUTH_USER_FILE}', 'htpasswd -c {AUTH_USER_FILE} <username>')
    ]

    def __init__(self, vars, template_dir=TEMPLATE_DIR, destdir=''):
        self.vars = vars
        self.lookup = TemplateLookup(directories=[template_dir])
        self.destdir = destdir
        for name, value in self.defaults.items():
            self.vars.setdefault(name, value)

    @classmethod
    def from_config(cls, cp, section='pov-server-page',
                    template_dir=TEMPLATE_DIR, destdir=''):
        vars = dict((name, cp.get(section, name)) for name in cls.defaults)
        return cls(vars, template_dir, destdir)

    def _compute_derived(self):
        self.vars['SHORTHOSTNAME'] = self.vars['HOSTNAME'].partition('.')[0]

    def build(self):
        self._compute_derived()
        for destination, template, marker in self.build_list:
            filename = self.destdir + destination.format(**self.vars)
            if template == self.DIRECTORY:
                self._create_directory(filename)
            else:
                self._build(filename, template, marker)

    def check(self):
        self._compute_derived()
        for target, command in self.check_list:
            filename = self.destdir + target.format(**self.vars)
            if not os.path.exists(filename):
                print("Please run %s" % command.format(**self.vars))

    def _create_directory(self, dirname):
        try:
            os.makedirs(dirname)
        except OSError, e:
            if e.errno == errno.EEXIST:
                pass
            else:
                raise

    def _replace_file(self, filename, marker, new_contents):
        assert marker in new_contents
        try:
            with open(filename) as f:
                old_contents = f.read()
                if marker not in old_contents:
                    raise Error('Refusing to overwrite %s' % filename)
        except IOError, e:
            if e.errno == errno.ENOENT:
                pass
            else:
                raise
        self._create_directory(os.path.dirname(filename))
        with open(filename, 'w') as f:
            f.write(new_contents)

    def _build(self, destination, templatename, marker):
        template = self.lookup.get_template(templatename)
        new_contents = template.render(**self.vars)
        if marker not in new_contents:
            new_contents = marker + '\n' + new_contents
        self._replace_file(destination, marker, new_contents)


def main():
    # Command-line options
    description = "Generate Apache configuration for a server page"
    parser = optparse.OptionParser('usage: %prog [options] [var=value ...]',
                                   description=description)
    parser.add_option('-v', '--verbose', action='store_true')
    parser.add_option('-c', '--config-file', default=DEFAULT_CONFIG_FILE)
    parser.add_option('--destdir', default='')
    opts, args = parser.parse_args()
    # Config file parsing
    cp = ConfigParser.SafeConfigParser(dict(
        enabled=False,
        **Builder.defaults
    ))
    if not cp.read([opts.config_file]):
        sys.exit("Could not read %s" % opts.config_file)
    # Command-line overrides
    for arg in args:
        name, _, value = arg.partition('=')
        cp.set('pov-server-page', name, value)
    # Enabled?
    enabled = cp.getboolean('pov-server-page', 'enabled')
    if not enabled:
        if opts.verbose:
            print("Disabled in the config file, quitting.")
        return
    # Build /var/www/{hostname} and /etc/apache2/sites-available/
    builder = Builder.from_config(cp, destdir=opts.destdir)
    try:
        builder.build()
        builder.check()
    except Error, e:
        sys.exit(str(e))


if __name__ == '__main__':
    main()
