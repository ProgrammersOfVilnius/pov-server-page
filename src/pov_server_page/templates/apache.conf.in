% if LOOPBACK_ONLY:
<VirtualHost 127.0.0.1:${HTTP_PORT} [::1]:${HTTP_PORT}>
  ServerName localhost
  ServerAlias ${HOSTNAME}
%     for alias in SERVER_ALIAS_LIST:
  ServerAlias ${alias}
%     endfor
  ServerAdmin root@${HOSTNAME}

  DocumentRoot /var/www/${HOSTNAME}
  ErrorLog /var/log/apache2/${HOSTNAME}/error.log
  CustomLog /var/log/apache2/${HOSTNAME}/access.log combined

  RewriteEngine on

% else:
<VirtualHost *:${HTTP_PORT}>
  ServerName ${HOSTNAME}
%     for alias in SERVER_ALIAS_LIST:
  ServerAlias ${alias}
%     endfor
  ServerAdmin root@${HOSTNAME}

  ErrorLog /var/log/apache2/${HOSTNAME}/error.log
  CustomLog /var/log/apache2/${HOSTNAME}/access.log combined

  # Redirect everything to HTTPS
  <If "%{HTTP_HOST} == '${HOSTNAME}'">
    Redirect permanent / https://${HOSTNAME}/
  </If>
  <Else>
    Redirect / https://${HOSTNAME}/
  </Else>
</VirtualHost>

<VirtualHost *:${HTTPS_PORT}>
  ServerName ${HOSTNAME}
%     for alias in SERVER_ALIAS_LIST:
  ServerAlias ${alias}
%     endfor
  ServerAdmin root@${HOSTNAME}

  DocumentRoot /var/www/${HOSTNAME}
  ErrorLog /var/log/apache2/${HOSTNAME}/error.log
  CustomLog /var/log/apache2/${HOSTNAME}/access.log combined

  SSLEngine on
  RewriteEngine on

%     if CANONICAL_REDIRECT:
  <If "%{HTTP_HOST} != '${HOSTNAME}'">
    Redirect / https://${HOSTNAME}/
  </If>

%     endif
%     if HSTS:
  # HSTS for 2 years
  Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains"

%     endif
%     if CSP:
  # CSP: everything from the same domain
  Header always set Content-Security-Policy "default-src 'self'; base-uri 'self'; form-action 'self'; object-src 'none'; block-all-mixed-content"

%     endif
  # Frames: no clickjacking thanks.
  Header always set X-Frame-Options "DENY"

  # XSS protection: please?
  Header always set X-Xss-Protection "1; mode=block"

  # No sniffing MIME types thanks.
  Header always set X-Content-Type-Options "nosniff"

  # Referrer policy: don't expose our hidden URL structure to other sites
  Header always set Referrer-Policy "strict-origin-when-cross-origin"

  # Try to avoid caching stale styles etc
  Header always setifempty Cache-control "must-revalidate"

  AddDefaultCharset UTF-8

% endif
% if INCLUDE:
%     for filename in INCLUDE.split():
  Include ${filename}
%     endfor

% endif
% if APACHE_EXTRA_CONF:
  ${APACHE_EXTRA_CONF.strip().replace('\n', '\n  ')}

% endif
  # Static files
  Alias /static /usr/share/pov-server-page/static
  <Directory /usr/share/pov-server-page/static>
    AllowOverride None
    Allow from all
    Satisfy any
  </Directory>

% if MOTD:
  # Allow ANSI higlighting of /etc/motd via inline styles
  <LocationMatch "^/(index.html)?$">
    Header always set Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; object-src 'none'; block-all-mixed-content"
  </LocationMatch>
  <Location /info>
    Header always set Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; object-src 'none'; block-all-mixed-content"
  </Location>
% endif

% if CHANGELOG:
  # Changelog
  WSGIScriptAlias /changelog ${CHANGELOG2HTML_SCRIPT}
  <Location /changelog>
    SetEnv HOSTNAME "${HOSTNAME}"
% if MOTD_FILE != "/etc/motd":
    SetEnv MOTD_FILE "${MOTD_FILE}"
% endif
    Header always set Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; object-src 'none'; block-all-mixed-content"
  </Location>

% endif
  # Disk usage
  WSGIScriptAlias /du/diff ${DUDIFF2HTML_SCRIPT}
  <Location /du/diff>
    SetEnv DIRECTORY "/var/www/${HOSTNAME}/du"
    Header always set Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; object-src 'none'; block-all-mixed-content"
  </Location>

  # Collectd stats
  RedirectMatch "/stats/?$" /stats/${SHORTHOSTNAME}
  ScriptAlias /stats/${SHORTHOSTNAME} ${COLLECTION_CGI}

  # Access control
  <Location />
    AuthType Basic
    AuthName "${HOSTNAME}"
    AuthUserFile ${AUTH_USER_FILE}
    Require valid-user
  </Location>

% if INCLUDE_POST:
%     for filename in INCLUDE_POST.split():
  Include ${filename}
%     endfor

% endif
% if APACHE_EXTRA_CONF_POST:
  ${APACHE_EXTRA_CONF_POST.strip().replace('\n', '\n  ')}

% endif
</VirtualHost>
